CBON()

//set character length to 0
SET(R10, 0xc001)
STORE(R0, 25, R10)
SET(R1,1)
LABEL(main_process_loop)
INC(R1,1)
BRR(main_process_loop)

LABEL(interrupt_handler)
    STORE(PC_ret, 0,FP) 
    STORE(FP_alt, 1,FP)

    SET(R10, 0xc001)

    STORE(R1, 0, R10)
    STORE(R2, 1, R10)
    STORE(R3, 2, R10)
    STORE(R4, 3, R10)
    STORE(R5, 4, R10)
    STORE(R6, 5, R10)
    STORE(R7, 6, R10)
    STORE(R8, 7, R10)
    STORE(R9, 8, R10)
    STORE(R10, 9, R10)
    STORE(R11, 10, R10)
    STORE(R12, 11, R10)
    STORE(R13, 12, R10)
    STORE(R14, 13, R10)
    STORE(R15, 14, R10)

    //saving and storing flags
    SAVEF(R4)
    STORE(R4, 15, R10)

//---------------------------------------------------------------------------------------

    //getchar and save it to r3
    OPCODE(0x1321)
    CMP(R3,R0)
    BZR(not_valid_char)

    CALL(FP_alt, handle_character)
    BRR(finished_handling_interrupt)

    LABEL(not_valid_char)
    //interrupt was caused by thread needing to run
    CALL(FP_alt, resume_thread)

    LABEL(finished_handling_interrupt)

//-------------------------------------------------------------------------------------

    SET(R10, 0xc001)

    LOAD(R4, 15, R10)
    RSTRF(R4)
    LOAD(R1, 0, R10)
    LOAD(R2, 1, R10)
    LOAD(R3, 2, R10)
    LOAD(R4, 3, R10)
    LOAD(R5, 4, R10)
    LOAD(R6, 5, R10)
    LOAD(R7, 6, R10)
    LOAD(R8, 7, R10)
    LOAD(R9, 8, R10)
    LOAD(R10, 9, R10)
    LOAD(R11, 10, R10)
    LOAD(R12, 11, R10)
    LOAD(R13, 12, R10)
    LOAD(R14, 13, R10)
    LOAD(R15, 14, R10)

    LOAD(PC_ret, 0,FP) 
    LOAD(FP_alt, 1,FP)

    //new opcode to signal end of interrupt handler
    //need this to differentitate call and return because we now have 2 functions
    OPCODE(0x2400)
RETURN(FP_alt, PC_ret)

LABEL(resume_thread)

    STORE(PC_ret, 2,FP) 
    STORE(FP_alt, 3,FP)

    // op code to get thread number from hardware and put in register
    OPCODE(0x1112)
    LSL8(R1,R1)
    //R1 = T_i * 256

    // restore thread T_i register and flag state from RAM with 256*T_i as starting RAM address
    LOAD(R4, 15, R1)
    RSTRF(R4)
    LOAD(R2, 1, R1)
    LOAD(R3, 2, R1)
    LOAD(R4, 3, R1)
    LOAD(R5, 4, R1)
    LOAD(R6, 5, R1)
    LOAD(R7, 6, R1)
    LOAD(R8, 7, R1)
    LOAD(R9, 8, R1)
    LOAD(R10, 9, R1)
    LOAD(R11, 10, R1)
    LOAD(R12, 11, R1)
    LOAD(R13, 12, R1)
    LOAD(R14, 13, R1)
    LOAD(R15, 14, R1)
    LOAD(R1, 0, R1)

    //---------------------------------------------------------------------------------------------------

    // run thread T_i

    // put thread number in R1-R10
    //basic thread code to test
    OPCODE(0x1112)
    OPCODE(0x1212)
    OPCODE(0x1312)
    OPCODE(0x1412)
    OPCODE(0x1512)
    OPCODE(0x1612)
    OPCODE(0x1712)
    OPCODE(0x1812)
    OPCODE(0x1912)
    OPCODE(0x1a12)

    //---------------------------------------------------------------------------------------------------


    // op code to get thread number from hardware and put in register
    //hopefully R10 has no important data
    OPCODE(0x1a12)
    LSL8(R10,R10)
    //R10 = T_i * 256

    // store thread T_i register and flag state to RAM with 256*T_i as starting RAM address
    STORE(R1, 0, R10)
    STORE(R2, 1, R10)
    STORE(R3, 2, R10)
    STORE(R4, 3, R10)
    STORE(R5, 4, R10)
    STORE(R6, 5, R10)
    STORE(R7, 6, R10)
    STORE(R8, 7, R10)
    STORE(R9, 8, R10)
    STORE(R10, 9, R10)
    STORE(R11, 10, R10)
    STORE(R12, 11, R10)
    STORE(R13, 12, R10)
    STORE(R14, 13, R10)
    STORE(R15, 14, R10)

    //saving and storing flags
    SAVEF(R4)
    STORE(R4, 15, R10)

    LOAD(PC_ret, 2,FP) 
    LOAD(FP_alt, 3,FP)
RETURN(FP_alt, PC_ret)

LABEL(handle_character)
    SET(R10, 0xc001)

    //which keyboard to get char from
    SET(R2,1)

    //getchar and save it to r3
    OPCODE(0x1321)
    //put it in ram 

    //set r5 to be the code for new line 
    SET(R5, 10)
    //check if curr char is a new line
    CMP(R3,R5)

    //branch if char is new line 
    BZR(nl)

    //NOT NEWLINE CHARACTER

    //gets string length and increments it
    //R7 holds current string length
    LOAD(R7, 25, R10)
    INC(R7, 1)
    STORE(R7, 25, R10)

    //finds the correct RAM address at the end 
    //of the string being stored and stores the char

    ADD(R9, R0, R10)
    INC(R9, 25)
    ADD(R9, R7, R9)
    STORE(R3, 0, R9)
    BRR(finished_handling_character)

    //NEWLINE CHARACTER
    LABEL(nl)
    //if it is a new line, we will print the contents of the string stored in RAM

    //Loading the lenth of the string and getting the address of the beginning of the string
    LOAD(R7, 25, R10)
    ADD(R9, R0, R10)
    INC(R9, 26)

    //which screen to print char to
    SET(R2,1)

    LABEL(WHILE)
    LOAD(R3, 0, R9)
    OPCODE(0x1320)
    STORE(R0, 0, R9) 
    INC(R9, 1)
    DEC(R7, 1)
    CMP(R7, R0)
    BGR(WHILE)
    OPCODE(0x1520)
    STORE(R0, 25, R10)
    LABEL(finished_handling_character)
RETURN(FP_alt, PC_ret)