

//For hardware reference:
//CALL(FP_alt, INTERRUPT) to get the interruping character r3 may cause conflict check before turning in 


//constantly running process
CBON()
SET(R1, 0)
LABEL(PROCESS)
INC(R1, 1)
BRR(PROCESS)




LABEL(INTERRUPT)
    SET(R10, 0xc000)

    //looping through to store all of the registers   

    STORE(R1, 0, R10)
    STORE(R2, 1, R10)
    STORE(R3, 2, R10)
    STORE(R4, 3, R10)
    STORE(R5, 4, R10)
    STORE(R6, 5, R10)
    STORE(R7, 6, R10)
    STORE(R8, 7, R10)
    STORE(R9, 8, R10)
    STORE(R10, 9, R10)
    STORE(R11, 10, R10)
    STORE(R12, 11, R10)
    STORE(R13, 12, R10)
    STORE(R14, 13, R10)
    STORE(R15, 14, R10)

    //saving and storing flags
    SAVEF(R4)
    STORE(R4, 15, R10)

    //stored flags too now entire state is backed up 
    //-----------------------------------------------------------------------------------

    //which keyboard to get char from
    SET(R3,1)

    //getchar and save it to r3
    OPCODE(0x1331)
    //put it in ram 

    //set r5 to be the code for new line 
    SET(R5, 10)
    //check if curr char is a new line
    CMP(R3,R5)

    //branch if char is new line 
    BZR(nl)

    //NOT NEWLINE CHARACTER

    //gets string length and increments it
    //R7 holds current string length
    LOAD(R7, 25, R10)
    INC(R7, 1)
    STORE(R7, 25, R10)

    //finds the correct RAM address at the end 
    //of the string being stored and stores the char
    SET(R9, 0)
    ADD(R9, R0, R10)
    INC(R9, 25)
    ADD(R9, R7, R9)
    STORE(R3, 0, R9)
    BRR(RESTORE)

    //NEWLINE CHARACTER
    LABEL(nl)
    //if it is a new line, we will print the contents of the string stored in RAM

    //Loading the lenth of the string and getting the address of the beginning of the string
    LOAD(R7, 25, R10)
    SET(R9, 0)
    ADD(R9, R0, R10)
    INC(R9, 26)

    //which screen to print char to
    SET(R2,1)

    LABEL(WHILE)
    LOAD(R3, 0, R9)
    OPCODE(0x1320)
    INC(R9, 1)
    DEC(R7, 1)
    CMP(R7, R0)
    BGR(WHILE)

    //------------------------------------------------------------------------------------------
    //now implementing restore to all data 


    LABEL(RESTORE)
    LOAD(R4, 15, R10)
    RSTRF(R4)
    LOAD(R1, 0, R10)
    LOAD(R2, 1, R10)
    LOAD(R3, 2, R10)
    LOAD(R4, 3, R10)
    LOAD(R5, 4, R10)
    LOAD(R6, 5, R10)
    LOAD(R7, 6, R10)
    LOAD(R8, 7, R10)
    LOAD(R9, 8, R10)
    LOAD(R10, 9, R10)
    LOAD(R11, 10, R10)
    LOAD(R12, 11, R10)
    LOAD(R13, 12, R10)
    LOAD(R14, 13, R10)
    LOAD(R15, 14, R10)

    RETURN(FP_alt, PC_ret)

